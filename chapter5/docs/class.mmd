classDiagram
  %% External base classes for inheritance visualization
  class BaseModel
  class TypedDict

  %% ==========================
  %% src/models
  %% ==========================
  class DataThread {
    +process_id: str
    +thread_id: int
    +user_request: str?
    +code: str?
    +error: str?
    +stderr: str?
    +stdout: str?
    +is_completed: bool
    +observation: str?
    +results: list[dict]
    +pathes: dict
  }
  DataThread --|> BaseModel

  class Task {
    +hypothesis: str
    +purpose: str
    +description: str
    +chart_type: str
  }
  Task --|> BaseModel

  class Plan {
    +purpose: str
    +archivement: str
    +tasks: list[Task]
  }
  Plan --|> BaseModel

  class SubTask {
    +state: bool
    +task: Task
  }
  SubTask --|> BaseModel

  class Program {
    +achievement_condition: str
    +execution_plan: str
    +code: str
  }
  Program --|> BaseModel

  class Review {
    +observation: str
    +is_completed: bool
  }
  Review --|> BaseModel

  class LLMResponse {
    +messages: list
    +content: str | BaseModel
    +model: str
    +created_at: int
    +input_tokens: int
    +output_tokens: int
    +cost: float?
  }
  LLMResponse --|> BaseModel

  %% ==========================
  %% src/graph/models
  %% ==========================
  class DataThread {
    +user_request: str?
    +code: str?
    +error: str?
    +stderr: str?
    +stdout: str?
    +is_completed: bool
    +observation: str?
    +results: list[dict]
    +pathes: dict
  }
  DataThread --|> BaseModel

  class ProgrammerState {
    +data_file: str
    +data_info: str
    +user_request: str
    +data_threads: list[DataThread]
    +sandbox_id: str
    +next_node: str
    +sub_tasks: list[SubTask]
  }
  ProgrammerState --|> TypedDict

  class DataAnalysisState {
    +data_file: str
    +data_info: str
    +user_goal: str
    +user_request: str
    +sub_tasks: list[SubTask]
    +data_threads: list[DataThread]
    +sub_task_threads: list[DataThread]
    +report: str
    +user_feedback: str
    +user_approval: bool
    +sandbox_id: str
    +next_node: str
  }
  DataAnalysisState --|> TypedDict

  %% ==========================
  %% src/graph (modules as classes)
  %% ==========================
  class data_analysis {
    static open_programmer(state)
    static_close_programmer(state)
    static build_data_analysis_graph()
    static invoke_workflow(workflow, input_data, config)
    static main()
  }

  class programmer {
    static _close_programmer_node(state)
    static build_programmer_graph(close_programmer_fn)
    static run_programmer_workflow(workflow, user_request, data_file, recursion_limit)
    static main()
  }

  %% ==========================
  %% src/graph/nodes (modules as classes)
  %% ==========================
  class approve_plan {
    static approve_plan(state)
  }

  class execute_code {
    static execute_code_node(state)
  }

  class generate_code {
    static generate_code_node(state)
  }

  class generate_plan {
    static generate_plan_node(state)
  }

  class generate_report {
    static generate_report_node(state)
  }

  class generate_review {
    static generate_review_node(state)
  }

  class set_dataframe {
    static set_dataframe_node(state)
  }

  %% ==========================
  %% src/modules (modules as classes)
  %% ==========================
  class describe_dataframe {
    static describe_dataframe(file_object, template_file)
  }

  class execute_code {
    static execute_code(sandbox, process_id, thread_id, code, user_request, timeout)
  }

  class generate_code {
    static generate_code(data_info, user_request, remote_save_dir, previous_thread, model, template_file)
  }

  class generate_plan {
    static generate_plan(data_info, user_request, model, template_file)
  }

  class generate_report {
    static generate_report(data_info, user_request, process_data_threads, model, output_dir, template_file)
  }

  class generate_review {
    static generate_review(data_info, user_request, data_thread, has_results, remote_save_dir, model, template_file)
  }

  class set_dataframe {
    static set_dataframe(sandbox, file_object, timeout, remote_data_path)
  }

  %% ==========================
  %% src/llms (modules as classes)
  %% ==========================
  class openai {
    static generate_response(messages, model, response_format)
  }

  class load_template {
    static load_template(template_file)
  }

  %% ==========================
  %% Key relations (selected)
  %% ==========================
  Plan --> Task : tasks*
  SubTask --> Task : task
  ProgrammerState --> DataThread : data_threads*
  ProgrammerState --> SubTask : sub_tasks*
  DataAnalysisState --> SubTask : sub_tasks*
  DataAnalysisState --> DataThread : data_threads*
  DataAnalysisState --> DataThread : sub_task_threads*

  %% ==========================
  %% Module dependency relations (src)
  %% ==========================
  %% graph/data_analysis.py
  data_analysis ..> ProgrammerState : import
  data_analysis ..> DataAnalysisState : import
  data_analysis ..> approve_plan : calls
  data_analysis ..> generate_plan : calls
  data_analysis ..> generate_report : calls
  data_analysis ..> programmer : calls

  %% graph/programmer.py
  programmer ..> ProgrammerState : import
  programmer ..> set_dataframe : calls
  programmer ..> generate_code : calls
  programmer ..> execute_code : calls
  programmer ..> generate_review : calls

  %% graph/nodes/*.py -> modules
  approve_plan ..> DataAnalysisState : import
  execute_code ..> ProgrammerState : import
  execute_code ..> DataThread : uses
  execute_code ..> execute_code : calls
  generate_code ..> ProgrammerState : import
  generate_code ..> DataThread : uses
  generate_code ..> describe_dataframe : calls
  generate_code ..> generate_code : calls
  generate_plan ..> DataAnalysisState : import
  generate_plan ..> SubTask : uses
  generate_plan ..> describe_dataframe : calls
  generate_plan ..> generate_plan : calls
  generate_report ..> DataAnalysisState : import
  generate_report ..> generate_report : calls
  generate_review ..> ProgrammerState : import
  generate_review ..> Review : uses
  generate_review ..> generate_review : calls
  set_dataframe ..> ProgrammerState : import
  set_dataframe ..> describe_dataframe : calls
  set_dataframe ..> set_dataframe : calls

  %% modules/*.py -> llms/* and models/*
  describe_dataframe ..> load_template : uses

  execute_code ..> DataThread : returns

  generate_code ..> DataThread : uses
  generate_code ..> Program : uses
  generate_code ..> LLMResponse : returns
  generate_code ..> openai : uses
  generate_code ..> load_template : uses

  generate_plan ..> Plan : returns
  generate_plan ..> LLMResponse : returns
  generate_plan ..> openai : uses
  generate_plan ..> load_template : uses

  generate_report ..> LLMResponse : returns
  generate_report ..> DataThread : reads
  generate_report ..> openai : uses
  generate_report ..> load_template : uses

  generate_review ..> LLMResponse : returns
  generate_review ..> DataThread : reads
  generate_review ..> Review : returns
  generate_review ..> openai : uses
  generate_review ..> load_template : uses

  %% llms/apis/openai.py -> llms/models/llm_response.py
  openai ..> LLMResponse : returns
